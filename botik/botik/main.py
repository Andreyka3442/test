import telebot
from telebot import types
import json
import os
import time
from threading import Thread
from telebot.apihelper import ApiTelegramException

TOKEN = "7804091351:AAFrdNXGAc-8t0Ec0JUb3VlYAP3nmqimF5U"
ADMIN_ID = 6853344685
PROFILES_FILE = "profiles.json"
USERS_FILE = "users.json"

bot = telebot.TeleBot(TOKEN)

if os.path.exists(PROFILES_FILE):
    with open(PROFILES_FILE, "r", encoding="utf-8") as f:
        profiles = json.load(f)
else:
    profiles = []

if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = set(json.load(f))
else:
    users = set()

def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(users), f)

def save_profiles():
    with open(PROFILES_FILE, "w", encoding="utf-8") as f:
        json.dump(profiles, f, ensure_ascii=False, indent=2)

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def safe_send_message(chat_id, text, **kwargs):
    try:
        return bot.send_message(chat_id, text, **kwargs)
    except ApiTelegramException as e:
        if "bot was blocked by the user" in str(e) or "USER_IS_BLOCKED" in str(e):
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
def safe_delete_message(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except ApiTelegramException as e:
        if "message to delete not found" in str(e):
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

temp_adding = {}
last_profile_messages = {}

def cleanup_old_messages(chat_id):
    if chat_id in last_profile_messages:
        old_ids = last_profile_messages[chat_id]
        def delete_old():
            time.sleep(3)
            for msg_id in old_ids:
                safe_delete_message(chat_id, msg_id)
        Thread(target=delete_old).start()

@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üíò –ù–∞–π—Ç–∏ –¥–µ–≤—É—à–∫—É —Ä—è–¥–æ–º"))
        markup.add(types.KeyboardButton("üë©‚Äçü¶∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥–µ–≤—É—à–µ–∫"))
        if message.from_user.id == ADMIN_ID:
            markup.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
            markup.add(types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
        safe_send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

@bot.message_handler(func=lambda msg: msg.text in ["üíò –ù–∞–π—Ç–∏ –¥–µ–≤—É—à–∫—É —Ä—è–¥–æ–º", "üë©‚Äçü¶∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥–µ–≤—É—à–µ–∫"])
def show_profile(message):
    try:
        users.add(message.from_user.id)
        save_users()
        if not profiles:
            safe_send_message(message.chat.id, "–ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            send_profile(message.chat.id, 0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_profile: {e}")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
def admin_add_profile(message):
    if message.from_user.id != ADMIN_ID:
        return safe_send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    temp_adding[message.from_user.id] = {"description": "", "photos": []}
    safe_send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:")

@bot.message_handler(func=lambda msg: msg.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
def list_profiles_for_deletion(message):
    if message.from_user.id != ADMIN_ID:
        return safe_send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    if not profiles:
        return safe_send_message(message.chat.id, "–ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç.")
    msg = "\n".join([f"{i+1}. {p['description'][:30]}..." for i, p in enumerate(profiles)])
    safe_send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç:\n{msg}\n\n–ù–∞–ø–∏—à–∏ /delete –ù–û–ú–ï–† –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['delete'])
def delete_profile(message):
    if message.from_user.id != ADMIN_ID:
        return safe_send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    try:
        index = int(message.text.split()[1]) - 1
        if 0 <= index < len(profiles):
            deleted = profiles.pop(index)
            save_profiles()
            safe_send_message(message.chat.id, f"–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted['description'][:30]}...")
        else:
            safe_send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except Exception as e:
        safe_send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /delete –ù–û–ú–ï–†")
        print(f"–û—à–∏–±–∫–∞ –≤ delete_profile: {e}")

@bot.message_handler(func=lambda msg: msg.from_user.id == ADMIN_ID and msg.from_user.id in temp_adding and not temp_adding[msg.from_user.id]["description"])
def receive_description(message):
    temp_adding[message.from_user.id]["description"] = message.text
    safe_send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /save")

@bot.message_handler(content_types=['photo'])
def receive_photo(message):
    if message.from_user.id in temp_adding and temp_adding[message.from_user.id]["description"]:
        temp_adding[message.from_user.id]["photos"].append(message.photo[-1].file_id)
        safe_send_message(message.chat.id, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ /save —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")

@bot.message_handler(commands=['save'])
def save_profile(message):
    if message.from_user.id in temp_adding:
        profiles.append(temp_adding.pop(message.from_user.id))
        save_profiles()
        safe_send_message(message.chat.id, "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
    else:
        safe_send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

def send_profile(chat_id, index):
    cleanup_old_messages(chat_id)

    profile = profiles[index]
    message_ids = []

    if profile["photos"]:
        media = [types.InputMediaPhoto(pid) for pid in profile["photos"]]
        try:
            sent = bot.send_media_group(chat_id, media)
            message_ids.extend([msg.message_id for msg in sent])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    markup = types.InlineKeyboardMarkup()
    if index > 0:
        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"profile_{index - 1}"))
    if index + 1 < len(profiles):
        markup.add(types.InlineKeyboardButton("‚û° –î–∞–ª–µ–µ", callback_data=f"profile_{index + 1}"))
    markup.add(types.InlineKeyboardButton("üíã –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", url="https://prev.affomelody.com/click?pid=98379&offer_id=25"))

    msg = safe_send_message(chat_id, profile["description"], reply_markup=markup)
    if msg:
        message_ids.append(msg.message_id)

    last_profile_messages[chat_id] = message_ids

@bot.callback_query_handler(func=lambda call: call.data.startswith("profile_"))
def navigate_profiles(call):
    try:
        index = int(call.data.split("_")[1])
        send_profile(call.message.chat.id, index)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ navigate_profiles: {e}")

@bot.message_handler(commands=['stats'])
def show_stats(message):
    if message.from_user.id == ADMIN_ID:
        safe_send_message(message.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    else:
        safe_send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

def start_polling():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    start_polling()
    auto-py-to-exe


