from aiogram import types

from bot import dp, user_states
from modules import userbot, database


user_messages = {}

@dp.callback_query(lambda call: call.data == "start_send_message")
async def start_send_message(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_states[user_id] = 'start_send_message_one_more'
    user_messages[user_id] = {}

    markup_buttons = []
    markup_buttons.append([types.InlineKeyboardButton(text="üìù –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="select_message_from_list")])
    markup_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

    markup = types.InlineKeyboardMarkup(inline_keyboard=markup_buttons)

    await call.message.edit_text("‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:*",
                                    parse_mode="Markdown", reply_markup=markup)
    

@dp.callback_query(lambda call: call.data == "back_to_start_send_message")
async def back_to_start_send_message(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_states[user_id] = 'start_send_message_one_more'

    markup_buttons = []
    markup_buttons.append([types.InlineKeyboardButton(text="üìù –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="select_message_from_list")])
    if user_messages.get(user_id):
        markup_buttons.append([types.InlineKeyboardButton(text="‚òëÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_send_message")])
    markup_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

    markup = types.InlineKeyboardMarkup(inline_keyboard=markup_buttons)

    await call.message.edit_text("‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.*",
                         parse_mode="Markdown", reply_markup=markup)
    

@dp.message(lambda message: user_states.get(message.from_user.id) == 'start_send_message_one_more')
async def start_send_message(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = 'start_send_message_one_more'

    if not user_messages.get(user_id):
        user_messages[user_id] = {}
    if not user_messages[user_id].get('text'):
        user_messages[user_id]['text'] = []

    user_messages[user_id]['text'].append(message.text)

    markup_buttons = []

    markup_buttons.append([types.InlineKeyboardButton(text="üìù –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="select_message_from_list")])
    markup_buttons.append([types.InlineKeyboardButton(text="‚òëÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_send_message")])
    markup_buttons.append([types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    markup = types.InlineKeyboardMarkup(inline_keyboard=markup_buttons)

    await message.answer("‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.*",
                         parse_mode="Markdown", reply_markup=markup)



@dp.callback_query(lambda call: call.data.startswith("start_send_message:"))
async def start_send_message(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_states[user_id] = 'start_send_message_one_more'

    message_id = int(call.data.split(":")[-1])
    message = await database.get_saved_text(message_id)

    if not user_messages.get(user_id):
        user_messages[user_id] = {}
    if not user_messages[user_id].get('text'):
        user_messages[user_id]['text'] = []

    user_messages[user_id]['text'].append(message['text'])

    markup_buttons = []

    markup_buttons.append([types.InlineKeyboardButton(text="üìù –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="select_message_from_list")])
    markup_buttons.append([types.InlineKeyboardButton(text="‚òëÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_send_message")])
    markup_buttons.append([types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    markup = types.InlineKeyboardMarkup(inline_keyboard=markup_buttons)

    await call.message.edit_text("‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.*",
                                    parse_mode="Markdown", reply_markup=markup)
    

@dp.callback_query(lambda call: call.data == "continue_send_message")
async def confirm_send_message(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_states[user_id] = "minutes_and_count"

    if not user_messages.get(user_id, {}).get('text'):
        await call.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!", show_alert=True)
        return

    markup_buttons = []
    markup_buttons.append([types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    markup = types.InlineKeyboardMarkup(inline_keyboard=markup_buttons)

    await call.message.edit_text("üìç *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Å –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.*\n\n"
                                    "üìç *–ù–∞–ø—Ä–∏–º–µ—Ä: '60, 10' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 10 —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ –æ–¥–∏–Ω —á–∞—Å*",
                                    parse_mode="Markdown", reply_markup=markup)
    

@dp.message(lambda message: user_states.get(message.from_user.id) == 'minutes_and_count')
async def send_message(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = None

    try:
        minutes, count = message.text.split(",")
        user_messages[user_id]['minutes'] = int(minutes)
        user_messages[user_id]['count'] = int(count)
    except:
        user_messages[user_id]['minutes'] = None
        user_messages[user_id]['count'] = None

        markup_buttons = []
        markup_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

        markup = types.InlineKeyboardMarkup(inline_keyboard=markup_buttons)

        await message.answer("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!*\n\n"
                            "üìç *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Å –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.*\n\n"
                            "üìç *–ù–∞–ø—Ä–∏–º–µ—Ä: '60, 10' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 10 —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ –æ–¥–∏–Ω —á–∞—Å*",
                            parse_mode="Markdown", reply_markup=markup)
        return

    markup_buttons = []
    markup_buttons.append([types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="main_menu"),
                            types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_send_message")])

    markup = types.InlineKeyboardMarkup(inline_keyboard=markup_buttons)

    user_messages_texts = "\n-------------------\n".join(user_messages[user_id]['text'])

    await message.answer(f"üìç –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {count} —Ä–∞–∑(–∞) —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {minutes} –º–∏–Ω—É—Ç(–∞)?\n\n"
                         f"{user_messages_texts}\n\n"
                         "üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.", reply_markup=markup)
    

@dp.callback_query(lambda call: call.data == "confirm_send_message")
async def confirm_send_message(call: types.CallbackQuery):
    user_id = call.from_user.id
    active_account = userbot.active_accounts[user_id]

    markup_buttons = []
    markup_buttons.append([types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    markup = types.InlineKeyboardMarkup(inline_keyboard=markup_buttons)

    if not active_account:
        await call.message.edit_text("‚ùå *–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!*", reply_markup=markup, parse_mode="Markdown")
        return
    
    selected_chats = userbot.selected_chats[active_account]

    if not selected_chats:
        await call.message.edit_text("‚ùå *–ß–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã!*", reply_markup=markup, parse_mode="Markdown")
        return
    
    await call.message.edit_text("‚ùóÔ∏è *–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã –æ–± –∫–∞–∂–¥–æ–º —á–∞—Ç–µ.*", reply_markup=markup, parse_mode="Markdown")
    
    for chat_id in selected_chats:
        chat_title = None
        success_count = 0
        error_count = 0

        chat_title, success_count, error_count = await userbot.send_delay_messages(active_account, chat_id, user_messages[user_id]['text'], user_messages[user_id]['minutes'], user_messages[user_id]['count'])

        if success_count == -999 and error_count == -999:
            await call.message.answer("‚ùå *–ê–∫–∫–∞—É–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.*", reply_markup=markup, parse_mode="Markdown")
            userbot.active_accounts[user_id] = None
            return
        
        await call.message.answer(f"‚ùóÔ∏è –ß–∞—Ç '{chat_title}' –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                                    f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        
    await call.message.answer("‚úÖ –í—Å–µ —á–∞—Ç—ã –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!", reply_markup=markup)